{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","name","setName","age","setAge","listOFFriends","setListOfFriends","useEffect","Axios","get","then","response","data","catch","console","log","className","type","placeholder","onChange","event","target","value","onClick","post","_id","map","val","id","newAge","prompt","put","updateFriend","delete","filter","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gNA+EeA,MA3Ef,WACA,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAsBF,mBAAS,GAA/B,mBAAOG,EAAP,KAAYC,EAAZ,KACA,EAA0CJ,mBAAS,IAAnD,mBAAOK,EAAP,KAAsBC,EAAtB,KAqCE,OATFC,qBAAU,WACRC,IAAMC,IAAI,4CACTC,MAAK,SAACC,GACLL,EAAiBK,EAASC,SAE3BC,OAAM,WACLC,QAAQC,IAAI,cAEb,IAEC,sBAAKC,UAAU,MAAf,UACE,sBAAKA,UAAU,SAAf,UACA,uBAAOC,KAAK,OAAOC,YAAY,iBAC/BC,SAAU,SAACC,GACTlB,EAAQkB,EAAMC,OAAOC,UAGvB,uBAAOL,KAAK,SACZC,YAAY,gBACZC,SAAU,SAACC,GACThB,EAAOgB,EAAMC,OAAOC,UAItB,wBAAQC,QAlDI,WAChBf,IAAMgB,KAAK,iDAAiD,CAC1DvB,KAAMA,EACNE,IAAKA,IACJO,MAAK,SAACC,GACPL,EAAiB,GAAD,mBAAKD,GAAL,CAAoB,CAACoB,IAAKd,EAASC,KAAKa,IAAKxB,KAAMA,EAAME,IAAKA,UA6C5E,2BAEA,qBAAKa,UAAU,gBAAf,SACCX,EAAcqB,KAAI,SAACC,GAClB,OACE,sBAAKX,UAAU,kBAAf,UACE,sBAAKA,UAAU,SAAf,UACA,wCAAWW,EAAI1B,QACf,wCAAW0B,EAAIxB,UAEhB,wBAAQoB,QAAS,YAnDP,SAACK,GACpB,IAAMC,EAASC,OAAO,iBACtBtB,IAAMuB,IAAI,8CAA8C,CAACF,OAAQA,EAAQD,GAAIA,IAAKlB,MAAM,WACpFJ,EAAiBD,EAAcqB,KAAI,SAACC,GAClC,OAAOA,EAAIF,KAAOG,EAAK,CAACH,IAAKG,EAAG3B,KAAM0B,EAAI1B,KAAKE,IAAK0B,GAAWF,SA+CpCK,CAAaL,EAAIF,MAAzC,oBACA,wBAAQG,GAAG,YAAYL,QAAS,WA3CtB,IAACK,IA2CyCD,EAAIF,IA1CjEjB,IAAMyB,OAAN,qDAA2DL,IAAMlB,MAAK,WACpEJ,EAAiBD,EAAc6B,QAAO,SAACP,GACrC,OAAOA,EAAIF,KAAOG,UAwCb,2BC1DIO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB3B,MAAK,YAAkD,IAA/C4B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a309f5ad.chunk.js","sourcesContent":["import './App.css';\nimport {useState, useEffect } from \"react\";  \nimport Axios from 'axios';\n\nfunction App() {\nconst [name, setName] = useState(\"\");\nconst [age, setAge] = useState(0);\nconst [listOFFriends, setListOfFriends] = useState([]);\n\nconst addFriend = () => {\n  Axios.post('https://mernfirstapp1.herokuapp.com//addfriend',{\n    name: name, \n    age: age,\n  }).then((response)=>{\n    setListOfFriends([...listOFFriends, {_id: response.data._id, name: name, age: age}])\n  })\n};\n\nconst updateFriend = (id) => {\n  const newAge = prompt('Enter New Age');\n  Axios.put('https://mernfirstapp1.herokuapp.com//update',{newAge: newAge, id: id}).then (()=> {\n      setListOfFriends(listOFFriends.map((val)=>{\n        return val._id == id ? {_id: id,name: val.name,age: newAge } : val \n      }))\n  })\n}\n\nconst deleteFriend = (id) =>{\n  Axios.delete(`https://mernfirstapp1.herokuapp.com/delete/${id}`).then(()=>{\n    setListOfFriends(listOFFriends.filter((val)=>{\n      return val._id != id;\n    }))\n  })\n};\n\nuseEffect(() => {\n  Axios.get('https://mernfirstapp1.herokuapp.com/read')\n  .then((response) => {\n    setListOfFriends(response.data)\n  })\n  .catch(()=> {\n    console.log(\"ERROR\");\n  });\n}, []);\n  return (\n    <div className=\"App\">\n      <div className=\"inputs\">\n      <input type=\"text\" placeholder=\"Friend name...\"  \n      onChange={(event)=> {\n        setName(event.target.value)\n      }}\n      />\n      <input type=\"number\" \n      placeholder=\"Friend age...\"\n      onChange={(event)=> {\n        setAge(event.target.value)\n      }}\n      />\n\n      <button onClick={addFriend}>Add Friend</button>\n      </div>\n      <div className=\"listOfFriends\">\n      {listOFFriends.map((val) => {\n        return (\n          <div className=\"friendContainer\">\n            <div className=\"friend\">\n            <h3>Name: {val.name}</h3>\n            <h3> Age: {val.age}</h3>\n           </div>\n           <button onClick={() => {updateFriend(val._id)}}>Update</button>\n           <button id=\"removeBtn\" onClick={() => {deleteFriend(val._id)}} >X</button>\n          </div>\n      );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}